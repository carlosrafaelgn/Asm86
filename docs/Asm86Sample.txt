({emulatorVersion:1,code:";-------------------------------------------------------------------------\n; Mapa das portas\n;-------------------------------------------------------------------------\n;\n; Temporiza\u00e7\u00e3o\n; 0x00 0x01 0x02 0x03 (LSB ... MSB) = tempo atual do sistema em ms (as portas 0, 1, 2 e 3 se atualizam quando a porta 0 \u00e9 lida) (RO)\n; 0x04 0x05 0x06 0x07 (LSB ... MSB) = intervalo do timer em ms (utilizado para ligar os timers 0, 1, 2 e 3) (RW)\n; 0x08 = timer 0 on/off (0 desliga o timer e qualquer outro valor ou liga ou reinicia) (RW)\n; 0x09 = timer 1 on/off (0 desliga o timer e qualquer outro valor ou liga ou reinicia) (RW)\n; 0x0A = timer 2 on/off (0 desliga o timer e qualquer outro valor ou liga ou reinicia) (RW)\n; 0x0B = timer 3 on/off (0 desliga o timer e qualquer outro valor ou liga ou reinicia) (RW)\n;\n; Bot\u00f5es e ilumina\u00e7\u00e3o\n; 0xE0 = n\u00famero do bot\u00e3o pressionado/solto (0 ... 15) (RO)\n; 0xE1 = estado do bot\u00e3o que foi alterado (0 = solto, 1 = pressionado) (RO)\n; 0xE2 = estado das l\u00e2mpadas (bit 0 controla l\u00e2mpada 0 ...) (RW)\n;\n; EEPROM\n; 0xE3 = EEPROM address (ao alterar address, se OE = 1, data \u00e9 atualizado com o conte\u00fado da EEPROM) (RW)\n; 0xE4 = EEPROM data (se OE = 1 escritas s\u00e3o ignoradas) (RW)\n; 0xE5 = EEPROM control (RW)\n;        bit 0 = WR Barra (ao alterar de 1 para 0, grava o conte\u00fado de data dentro da EEPROM)\n;        bit 1 = OE (1 faz com que data seja RO, e 0 faz com que data seja RW)\n;\n; Console\n; 0xE6 = valor de prop\u00f3sito geral (RW)\n;\t\t - quantidade m\u00e1xima de caracteres que o usu\u00e1rio pode digitar com o comando 1\n;\t\t - quantidade de caracteres para enviar para o console com o comando 3\n;\t\t - componente de cor dos comandos 6 ... 11\n; 0xE7 = valor de prop\u00f3sito geral (RW)\n;\t\t - \u00edndice da linha dos comandos 5 ... 11\n; 0xE8 = comandos de controle do console (RW)\n;\t\t 0 = oculta a entrada do console\n;\t\t 1 = mostra a entrada do console\n;\t\t 2 = limpa a mem\u00f3ria do console\n;\t\t 3 = envia o texto para a mem\u00f3ria do console (um caractere 0 termina a sa\u00edda, mesmo se o valor em 0xE6 for maior)\n;\t\t 4 = copia o conte\u00fado da mem\u00f3ria do console para a tela\n;\t\t 5 = copia o conte\u00fado da linha especificada para a tela\n;\t\t 6, 7, 8 = especifica a componente R, G ou B da cor do fundo da linha especificada\n;\t\t 9, 10, 11 = especifica a componente R, G ou B da cor do texto da linha especificada\n; 0xE9 = quantidade de caracteres digitada pelo usu\u00e1rio (esse valor zera com o comando 0 ou 1) (RO)\n; 0xEA = posi\u00e7\u00e3o X do cursor (0 ... 79) (RW)\n; 0xEB = posi\u00e7\u00e3o Y do cursor (0 ... 19 ou 20, quando Y = 20 o pr\u00f3ximo caractere escrito causa a rolagem da tela) (RW)\n; 0xEC 0xED 0xEE 0xEF (LSB ... MSB) = endere\u00e7o de onde obter o texto para transferir/armazenar o texto digitado (RW)\n;\n; Reset\n; 0xFF = system reset (escrever um valor diferente de 0 reinicia o processador e encerra o processamento) (WO)\n;\n;-------------------------------------------------------------------------\n; Mapa das interrup\u00e7\u00f5es externas\n;-------------------------------------------------------------------------\n; 0x20 = timer 0\n; 0x21 = timer 1\n; 0x22 = timer 2\n; 0x23 = timer 3\n; 0x30 = bot\u00f5es\n; 0x31 = bot\u00e3o OK da entrada do console\n;\n;-------------------------------------------------------------------------\n; Instru\u00e7\u00f5es de armazenamento de contexto\n;-------------------------------------------------------------------------\n; XSAVE mem = salva o estado do processador no endere\u00e7o de mem\u00f3ria mem (requer pelo menos 36 bytes)\n; XRSTOR mem = recupera o estado do processador do endere\u00e7o de mem\u00f3ria mem (requer pelo menos 36 bytes)\n; A instru\u00e7\u00e3o XSAVE armazena os registradores nessa ordem: EAX, EBX, ECX, EDX, ESI, EDI, EBP, ESP, FLAGS\n;-------------------------------------------------------------------------\n\n;---------------------------------------------------------------------------\n; O programa sempre inicia a execu\u00e7\u00e3o na primeira linha v\u00e1lida\n;---------------------------------------------------------------------------\n\t; Configura a exibi\u00e7\u00e3o da tela\n\tlea eax, info ; Imprime as instru\u00e7\u00f5es\n\tout 0xEC, eax\n\tmov eax, 0x0300FF\n\tout 0xE6, eax\n\tmov ax, 0x1300 ; Move o cursor para 0,19\n\tout 0xEA, ax\n\tlea eax, info2 ; Imprime o rodap\u00e9\n\tout 0xEC, eax\n\tmov eax, 0x0300FF\n\tout 0xE6, eax\n\tmov eax, 0x090700 ; Componente R da cor do texto da linha 7\n\tout 0xE6, eax\n\tmov eax, 0x0A07BB ; Componente G da cor do texto da linha 7\n\tout 0xE6, eax\n\tmov eax, 0x0B0700 ; Componente B da cor do texto da linha 7\n\tout 0xE6, eax\n\tmov eax, 0x061344 ; Componente R da cor do fundo da linha 19\n\tout 0xE6, eax\n\tmov eax, 0x0713AA ; Componente G da cor do fundo da linha 19\n\tout 0xE6, eax\n\tmov eax, 0x0813FF ; Componente B da cor do fundo da linha 19\n\tout 0xE6, eax\n\tmov eax, 0x091300 ; Componente R da cor do texto da linha 19\n\tout 0xE6, eax\n\tmov eax, 0x0A1300 ; Componente G da cor do texto da linha 19\n\tout 0xE6, eax\n\tmov eax, 0x0B1300 ; Componente B da cor do texto da linha 19\n\tout 0xE6, eax\n\tmov al, 4 ; Atualiza a tela inteira de uma s\u00f3 vez\n\tout 0xE8, al\n\t; Espera o usu\u00e1rio escolher o teste:\n\t; 1 = Teste de timers, interrup\u00e7\u00f5es e ilumina\u00e7\u00e3o\n\t; 2 = Teste de bot\u00f5es e ilumina\u00e7\u00e3o\n\t; 3 = Teste de ilumina\u00e7\u00e3o aleat\u00f3ria\nAGUARDA_TECLA:\n\thlt\n\tin ax, 0xE0\n\tcmp ax, 0x0001 ; Soltou o bot\u00e3o 1\n\tje TESTE1\n\tcmp ax, 0x0002 ; Soltou o bot\u00e3o 2\n\tje TESTE2\n\tcmp ax, 0x0003 ; Soltou o bot\u00e3o 3\n\tje TESTE3\n\tcmp ah, 0\n\tjne AGUARDA_TECLA\n\tint 3 ; Chama o depurador para mostrar que nenhum bot\u00e3o v\u00e1lido foi selecionado\n\tjmp AGUARDA_TECLA\nDESLIGA:\n\t; Enviar qualquer byte diferente de 0 para a porta 255 termina a execu\u00e7\u00e3o\n\tmov al, 1\n\tout 255, al\n;---------------------------------------------------------------------------\n; Teste 1 = Teste de timers, interrup\u00e7\u00f5es e ilumina\u00e7\u00e3o\n;---------------------------------------------------------------------------\nTESTE1:\n\tmov eax, 0x0902FF ; Componente R da cor do texto da linha 2\n\tout 0xE6, eax\n\tmov eax, 0x0A0244 ; Componente G da cor do texto da linha 2\n\tout 0xE6, eax\n\tmov eax, 0x0B02DD ; Componente B da cor do texto da linha 2\n\tout 0xE6, eax\n\tmov ax, 0x0502 ; Atualiza a linha 2 na tela\n\tout 0xE7, ax\n\t\n\tmov eax, 10000 ; Configura o timer 0 para 10 segundos\n\tout 4, eax\n\t\n\tmov al, 0b00110011\n\tout 0xE2, al\n\tmov al, 1\n\tout 8, al\n\thlt ; Qualquer interrup\u00e7\u00e3o far\u00e1 com que o processador avance para a pr\u00f3xima instru\u00e7\u00e3o\n\t\n\tmov al, 0b11001100\n\tout 0xE2, al\n\tmov al, 1\n\tout 8, al\n\tcall ESPERA_TIMER\n\t\n\tmov eax, 1000 ; Configura o timer 0 para 1 segundo\n\tout 4, eax\n\t\n\tmov al, 0b01010101\n\tout 0xE2, al\n\tmov al, 1\n\tout 8, al\n\thlt\n\t\n\tmov al, 0b10101010\n\tout 0xE2, al\n\tmov al, 1\n\tout 8, al\n\thlt\n\t\n\t; Antes de desligar, pisca 10 vezes\n\tmov ecx, 10\n\t\n\tmov eax, 75 ; Configura o timer 0 para 75 ms\n\tout 4, eax\nPISCA:\n\tmov al, 0b11111111\n\tout 0xE2, al\n\tmov al, 1\n\tout 8, al\n\thlt\n\tmov al, 0b00000000\n\tout 0xE2, al\n\tmov al, 1\n\tout 8, al\n\thlt\n\t; Duas formas de se obter o mesmo efeito\n\t;dec ecx\n\t;jnz PISCA\n\tloop PISCA\n\tjmp DESLIGA\nESPERA_TIMER:\n\tin al, 8 ; Verifica o estado do timer\n\ttest al, al\n\tjz ESPERA_TIMER_FIM\n\thlt\n\tjmp ESPERA_TIMER\nESPERA_TIMER_FIM:\n\tret\n;---------------------------------------------------------------------------\n; Teste 2 = Teste de bot\u00f5es e ilumina\u00e7\u00e3o\n;---------------------------------------------------------------------------\nTESTE2:\n\tmov eax, 0x0903FF ; Componente R da cor do texto da linha 3\n\tout 0xE6, eax\n\tmov eax, 0x0A0344 ; Componente G da cor do texto da linha 3\n\tout 0xE6, eax\n\tmov eax, 0x0B03DD ; Componente B da cor do texto da linha 3\n\tout 0xE6, eax\n\tmov ax, 0x0503 ; Atualiza a linha 3 na tela\n\tout 0xE7, ax\n\t\n\tlea eax, IDT ; Configura a IDT\n\tmov [eax+0x20*4], INT_GEN\n\tmov [eax+0x30*4], INT_TECLA2\n\tlidt eax\n\tsti\n_HLT:\n\thlt\n\tjmp _HLT\nINT_GEN:\n\tiret\nINT_TECLA2:\n\tin al, 0xE0\n\tout 0xE2, al\n\tcmp al, 0\n\tje DESLIGA\n\tiret\n;---------------------------------------------------------------------------\n; Teste 3 = Teste de ilumina\u00e7\u00e3o aleat\u00f3ria\n;---------------------------------------------------------------------------\nTESTE3:\n\tmov eax, 0x0904FF ; Componente R da cor do texto da linha 4\n\tout 0xE6, eax\n\tmov eax, 0x0A0444 ; Componente G da cor do texto da linha 4\n\tout 0xE6, eax\n\tmov eax, 0x0B04DD ; Componente B da cor do texto da linha 4\n\tout 0xE6, eax\n\tmov ax, 0x0504 ; Atualiza a linha 4 na tela\n\tout 0xE7, ax\n\t\n\tlea eax, IDT\n\tmov [eax+0x20*4], INT_GEN\n\tmov [eax+0x30*4], INT_TECLA3\n\tlidt eax\n\tsti\n\tin eax, 0x00 ; Utiliza a hora atual como in\u00edcio dos n\u00fameros aleat\u00f3rios\n\tmov ecx, 1103515245\n\tmov ebx, 1 ; Utiliza EBX como controle de pause\nLOOPING3:\n\tout 0xE2, al\n\timul ecx ; Gera outro n\u00famero aleat\u00f3rio\n\tadd eax, 12345\n\tcmp ebx, 0\n\tje PAUSE_LOOPING3\n\tjmp LOOPING3\nPAUSE_LOOPING3:\n\thlt\n\tcmp ebx, 0\n\tjne LOOPING3\n\tjmp PAUSE_LOOPING3\nINT_TECLA3:\n\tin ax, 0xE0\n\tcmp ax, 0x0000 ; Soltou a tecla 0\n\tje DESLIGA\n\tcmp ax, 0x0001 ; Soltou a tecla 1\n\tjne INT_TECLA3_FIM\n\txor ebx, 1\nINT_TECLA3_FIM:\n\tiret\n\t",variables:[],eeprom:[]})